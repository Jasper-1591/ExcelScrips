from openpyxl import Workbook
from openpyxl.styles import Alignment

# 创建Workbook和工作表
wb = Workbook()
ws = wb.active

# 设置标题行
headers = [
    "时间", "店铺", "箱数", "毛重", "体积", "体积重", "地区", "仓点", "货代", 
    "报价", "渠道", "时效", "截仓时间", "船期", "下一水船期", "预计费用"
]
ws.append(headers)

# 数据内容
data = [
    # 店铺①
    ["2025/6/3", "①", 136, 1622.5, 10.472566, 1748.918522, "美东", "TEB6", "大森林", 9.8, "美东经济卡派", "35-57天", 0, 0, 0, 35584.27506],
    ["", "", "", "", "", "", "", "", "宝通达", 10, "纽约卡派专线", "45-55天", "2025/6/7", "2025/6/14", 0, ""],
    ["", "", "", "", "", "", "", "", "九方通逊（宁波）", 8.6, "宁波美东卡派(包税)", "", "", "", "", ""],
    ["", "", "", "", "", "", "", "", "彗星国际（宁波）", 8.5, "纽约卡派", "开船后35-45天左右", "6.7/6.13", "预计6.12/6.18", 0, ""],
    ["", "", "", "", "", "", "", "", "纽酷", 8.6, "纽约45日达-含税", "开船后50天左右", "6.07晚上8点", "6.13-7.19", "6.10晚上8点", ""],
    ["", "", "", "", "", "", "", "", "佳速达", 8, "美东纽约卡派", "35-45天", "6.8", "6.12", "6.15/6.19", 13991.34818],
    
    ["", "", 85, 1013.5, 6.506152, 1086.527384, "美西", "SNA4", "大森林", 8.5, "美西经济卡派", "19-27天", 0, 0, 0, ""],
    ["", "", "", "", "", "", "", "", "宝通达", 10.3, "宝美卡派", "30-45天", "2025/6/7", "2025/6/12", 0, ""],
    ["", "", "", "", "", "", "", "", "九方通逊（宁波）", 8.2, "宁波美西卡派(包税)", "", "", "", "", ""],
    ["", "", "", "", "", "", "", "", "彗星国际（宁波）", 7.5, "洛杉矶卡派", "开船后22-25天左右", "6.10号", "预计6.15号", 0, 8148.95538],
    ["", "", "", "", "", "", "", "", "纽酷", 8.5, "美西特惠-含税", "开船后35天左右", "6.07下午5点", "6.12-6.30", 0, ""],
    ["", "", "", "", "", "", "", "", "佳速达", 7.5, "美西洛杉矶卡派", "23-29天", "6.8", "6.12", "6.15/6.19", ""],
    
    ["", "", 74, 890, 5.6846565, 949.3376355, "美中", "ORD2", "大森林", 11.2, "美中经济卡派", "31-42天", 0, 0, 0, ""],
    ["", "", "", "", "", "", "", "", "宝通达", 11.3, "芝加哥卡派专线", "35-45天", "2025/6/7", "2025/6/12", 0, ""],
    ["", "", "", "", "", "", "", "", "九方通逊（宁波）", 9.6, "宁波芝加哥卡派(包税)", "", "", "", "", ""],
    ["", "", "", "", "", "", "", "", "彗星国际（宁波）", 10, "洛杉矶卡派", "开船后25-35天左右", "6.10号", "预计6.15号", 0, ""],
    ["", "", "", "", "", "", "", "", "纽酷", 10.2, "芝加哥45日达-含税", "开船后40-50天左右", "6.07晚上8点", "6.13-7.19", "6.10晚上8点", ""],
    ["", "", "", "", "", "", "", "", "佳速达", 8.7, "美中芝加哥卡派", "35-42天", "6.8", "6.12", "6.19", 8259.237429],
    
    # 更多数据...
    # 店铺②
    ["2025/6/3", "②", 99, 1175.5, 7.649728, 1277.504576, "美东", "ACY2", "大森林", 9.8, "美东经济卡派", "35-57天", 0, 0, 0, 37082.99606],
    ["", "", "", "", "", "", "", "", "宝通达", 10, "纽约卡派专线", "45-55天", "2025/6/7", "2025/6/14", 0, ""],
    ["", "", "", "", "", "", "", "", "九方通逊（宁波）", 8.6, "宁波美东卡派(包税)", "", "", "", "", ""],
    ["", "", "", "", "", "", "", "", "彗星国际（宁波）", 8.5, "纽约卡派", "开船后35-45天左右", "6.7/6.13", "预计6.12/6.18", 0, ""],
    ["", "", "", "", "", "", "", "", "纽酷", 8.7, "纽约45日达-含税", "开船后50天左右", "6.07晚上8点", "6.13-7.19", "6.10晚上8点", ""],
    ["", "", "", "", "", "", "", "", "佳速达", 8, "美东纽约卡派", "35-45天", "6.8", "6.12", "6.15/6.19", 10220.03661],
    
    # 店铺③
    ["2025/6/3", "③", 22, 272.5, 1.7063835, 284.9660445, "美中", "SAT4", "大森林", 12.5, "美中经济卡派", "31-42天", 0, 0, 0, 41848.84946],
    ["", "", "", "", "", "", "", "", "宝通达", 10.8, "休斯顿卡派专线", "35-45天", "2025/6/6", "2025/6/11", 0, ""],
    ["", "", "", "", "", "", "", "", "九方通逊（宁波）", 9, "宁波休斯顿卡派(包税)", "", "", "", "", ""],
    ["", "", "", "", "", "", "", "", "彗星国际（宁波）", 10, "洛杉矶卡派", "开船后25-35天左右", "6.10号", "预计6.15号", 0, ""],
    ["", "", "", "", "", "", "", "", "纽酷", 9.9, "休斯顿35日达-含税", "开船后45天左右", "6.07中午12点", "6.11-7.11", 0, ""],
    ["", "", "", "", "", "", "", "", "佳速达", 7.8, "美中休斯顿卡派", "35-45天", "6.6", "6.1", "6.17", 2222.735147],
]

# 写入数据
for row in data:
    ws.append(row)

# 设置单元格合并和格式
# 合并相同店铺的行
current_shop = None
start_row = 2  # 数据从第2行开始

for i, row in enumerate(data, start=2):
    if row[1]:  # 如果有店铺值
        if current_shop:
            # 合并上一个店铺的行
            ws.merge_cells(f'A{start_row}:A{i-1}')
            ws.merge_cells(f'B{start_row}:B{i-1}')
        current_shop = row[1]
        start_row = i
    else:
        continue

# 合并最后一个店铺的行
ws.merge_cells(f'A{start_row}:A{len(data)+1}')
ws.merge_cells(f'B{start_row}:B{len(data)+1}')

# 设置对齐方式
for row in ws.iter_rows():
    for cell in row:
        cell.alignment = Alignment(horizontal='center', vertical='center')

# 自动调整列宽
for col in ws.columns:
    max_length = 0
    column = col[0].column_letter
    for cell in col:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(str(cell.value))
        except:
            pass
    adjusted_width = (max_length + 2) * 1.2
    ws.column_dimensions[column].width = adjusted_width

# 保存文件
wb.save("物流报价表.xlsx")
print("Excel文件已生成：物流报价表.xlsx")








# 改进后的合并函数
def merge_similar_cells(ws, col_index, start_row=2):
    """合并指定列中相同内容的连续单元格"""
    prev_value = None
    merge_start = start_row
    
    for row in range(start_row, len(data) + 2):  # +2因为数据从第2行开始
        # 获取当前单元格值
        current_cell = ws.cell(row=row, column=col_index)
        current_value = current_cell.value
        
        # 如果是最后一行或值发生变化
        if row == len(data) + 1 or current_value != prev_value:
            # 如果之前有需要合并的连续相同值
            if merge_start < row and prev_value is not None and prev_value != "":
                # 检查要合并的范围是否有效
                if merge_start < row:
                    ws.merge_cells(
                        start_row=merge_start, start_column=col_index,
                        end_row=row-1, end_column=col_index
                    )
            # 重置合并起始行
            merge_start = row
            prev_value = current_value

# 合并各列中相同内容的单元格
columns_to_merge = {
    "时间": 1,
    "店铺": 2,
    "箱数": 3,
    "毛重": 4,
    "体积": 5,
    "体积重": 6,
    "地区": 7,
    "仓点": 8
}

for col_name, col_idx in columns_to_merge.items():
    merge_similar_cells(ws, col_idx)

# 设置对齐方式
for row in ws.iter_rows():
    for cell in row:
        cell.alignment = Alignment(horizontal='center', vertical='center')

# 自动调整列宽
for col in ws.columns:
    max_length = 0
    column = col[0].column_letter
    for cell in col:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(str(cell.value))
        except:
            pass
    adjusted_width = (max_length + 2) * 1.2
    ws.column_dimensions[column].width = adjusted_width

# 保存文件
wb.save("物流报价表.xlsx")
print("Excel文件已生成：物流报价表.xlsx")